import { useState, useEffect } from "react"
import { View, StyleSheet, ScrollView, Alert, Linking, TouchableOpacity, Dimensions } from "react-native"
import { Text, Card, Switch, List, Divider, Button, SegmentedButtons, Chip, Dialog, Portal, IconButton, Surface } from "react-native-paper"
import { SafeAreaView } from "react-native-safe-area-context"
import { useTheme } from "../context/ThemeContext"
import { useSettings } from "../context/SettingsContext"

export default function SettingsScreen() {
  const { isDarkMode, themeMode, setTheme, currentTheme, systemTheme, accessibilitySettings: themeAccessibilitySettings, updateAccessibilitySettings } = useTheme()
  const { settings, updateSetting, resetToDefaults, clearAppData, triggerHapticFeedback, isExpoGo, notificationsAvailable } = useSettings()
  
  const [showLanguageDialog, setShowLanguageDialog] = useState(false)
  const [showResetDialog, setShowResetDialog] = useState(false)

  const handleThemeChange = (value) => {
    triggerHapticFeedback('light')
    setTheme(value)
  }

  const handleSettingChange = (key, value) => {
    console.log('Setting change:', { key, value, currentSettings: settings })
    triggerHapticFeedback('light')
    
    // Handle accessibility settings that affect theme
    if (key === 'largeText' || key === 'highContrast' || key === 'textSizeLevel') {
      // Create the new accessibility settings object
      let newAccessibilitySettings = {
        ...themeAccessibilitySettings,
        [key]: value
      }
      
      // Auto-sync largeText and textSizeLevel
      if (key === 'largeText') {
        if (value && themeAccessibilitySettings.textSizeLevel === 0) {
          newAccessibilitySettings.textSizeLevel = 1
        } else if (!value) {
          newAccessibilitySettings.textSizeLevel = 0
        }
      } else if (key === 'textSizeLevel') {
        newAccessibilitySettings.largeText = value > 0
      }
      
      console.log('Updating accessibility settings:', newAccessibilitySettings)
      
      // Update theme context first
      updateAccessibilitySettings(newAccessibilitySettings)
      
      // Update settings context for all changed values
      updateSetting(key, value)
      if (key === 'largeText' && value && themeAccessibilitySettings.textSizeLevel === 0) {
        updateSetting('textSizeLevel', 1)
      } else if (key === 'largeText' && !value) {
        updateSetting('textSizeLevel', 0)
      } else if (key === 'textSizeLevel') {
        updateSetting('largeText', value > 0)
      }
    } else {
      updateSetting(key, value)
    }
  }

  const handleResetToDefaults = () => {
    triggerHapticFeedback('warning')
    setShowResetDialog(true)
  }

  const confirmReset = () => {
    setShowResetDialog(false)
    resetToDefaults()
    // Also reset accessibility settings
    updateAccessibilitySettings({ largeText: false, textSizeLevel: 0, highContrast: false })
    triggerHapticFeedback('success')
  }

  // Create dynamic styles based on current theme
  const styles = createStyles(currentTheme)

  const getThemeDescription = () => {
    switch (themeMode) {
      case 'light':
        return 'Always use light theme'
      case 'dark':
        return 'Always use dark theme'
      case 'system':
        return `Follow system (currently ${systemTheme || 'unknown'})`
      default:
        return 'Follow system preference'
    }
  }

  const accessibilitySettings = [
    {
      title: "Large Text",
      description: "Increase text size for better readability",
      key: "largeText",
      icon: "format-size",
      expandable: true, // This setting has expandable content
    },
    {
      title: "High Contrast",
      description: "Enhance contrast for better visibility",
      key: "highContrast",
      icon: "contrast-circle",
    },
    {
      title: "Haptic Feedback",
      description: "Vibration feedback for interactions",
      key: "hapticFeedback",
      icon: "vibrate",
    },
  ]

  const notificationSettings = [
    {
      title: "Push Notifications",
      description: isExpoGo 
        ? "Requires development build (saved for future use)" 
        : "Receive notifications on your device",
      key: "pushNotifications",
      icon: "bell",
    },
    {
      title: "Email Notifications",
      description: "Receive updates via email",
      key: "emailNotifications",
      icon: "email",
    },
  ]

  const privacySettings = [
    {
      title: "Two-Factor Authentication",
      description: "Add extra security to your account",
      key: "twoFactorAuth",
      icon: "shield-check",
    },
    {
      title: "Location Services",
      description: "Allow app to access your location",
      key: "locationServices",
      icon: "map-marker",
    },
  ]

  const renderSettingItem = (item) => (
    <List.Item
      key={item.key}
      title={item.title}
      description={item.description}
      left={(props) => <List.Icon {...props} icon={item.icon} />}
      right={() => (
        <Switch
          value={settings[item.key]}
          onValueChange={(value) => handleSettingChange(item.key, value)}
          accessibilityLabel={`Toggle ${item.title}`}
          disabled={item.key === 'pushNotifications' && isExpoGo && !notificationsAvailable}
        />
      )}
      style={[
        styles.settingItem,
        item.key === 'pushNotifications' && isExpoGo && !notificationsAvailable && styles.disabledItem
      ]}
    />
  )

  const renderLargeTextSetting = () => (
    <View key="largeText">
      <List.Item
        title="Large Text"
        description="Increase text size for better readability"
        left={(props) => <List.Icon {...props} icon="format-size" />}
        right={() => (
          <Switch
            value={settings.largeText}
            onValueChange={(value) => handleSettingChange('largeText', value)}
            accessibilityLabel="Toggle Large Text"
          />
        )}
        style={styles.settingItem}
      />
      
      {settings.largeText && (
        <View style={styles.textSizeContainer}>
          <View style={styles.textSizeHeader}>
            <Text variant="bodyMedium" style={styles.textSizeLabel}>
              Text Size Level
            </Text>
            <Chip 
              mode="outlined" 
              textStyle={styles.levelChipText}
              style={styles.levelChip}
            >
              {['Normal', 'Large', 'Extra Large', 'Huge'][settings.textSizeLevel] || 'Normal'}
            </Chip>
          </View>
          
          <View style={styles.sliderContainer}>
            <View style={styles.sliderLabels}>
              <Text variant="bodySmall" style={styles.sliderLabelText}>Normal</Text>
              <Text variant="bodySmall" style={styles.sliderLabelText}>Large</Text>
              <Text variant="bodySmall" style={styles.sliderLabelText}>Extra</Text>
              <Text variant="bodySmall" style={styles.sliderLabelText}>Huge</Text>
            </View>
            
            <View style={styles.buttonSliderContainer}>
              {[0, 1, 2, 3].map((level) => (
                <TouchableOpacity
                  key={level}
                  style={[
                    styles.sliderButton,
                    {
                      backgroundColor: settings.textSizeLevel === level 
                        ? currentTheme.colors.primary 
                        : currentTheme.colors.surfaceVariant
                    }
                  ]}
                  onPress={() => {
                    triggerHapticFeedback('light')
                    handleSettingChange('textSizeLevel', level)
                  }}
                >
                  <View 
                    style={[
                      styles.sliderButtonInner,
                      {
                        backgroundColor: settings.textSizeLevel === level 
                          ? currentTheme.colors.surface 
                          : 'transparent'
                      }
                    ]}
                  />
                </TouchableOpacity>
              ))}
            </View>
          </View>
          
          <View style={styles.previewContainer}>
            <Text variant="bodySmall" style={styles.previewLabel}>
              Preview:
            </Text>
            <Text 
              variant="bodyMedium" 
              style={[
                styles.previewText,
                { 
                  fontSize: 16 * [1.0, 1.2, 1.4, 1.6][settings.textSizeLevel],
                  color: currentTheme.colors.onSurface 
                }
              ]}
            >
              This is how your text will look
            </Text>
          </View>
        </View>
      )}
    </View>
  )

  const languages = [
    { code: 'en', name: 'English', native: 'English' },
    { code: 'si', name: 'Sinhala', native: 'සිංහල' },
    { code: 'ta', name: 'Tamil', native: 'தமிழ்' },
  ]

  const getCurrentLanguage = () => {
    const lang = languages.find(l => l.code === settings.language)
    return lang ? lang.name : 'English'
  }

  const otherOptions = [
    {
      title: "Language",
      description: getCurrentLanguage(),
      icon: "translate",
      onPress: () => {
        triggerHapticFeedback('light')
        setShowLanguageDialog(true)
      },
    },
    {
      title: "Data & Storage",
      description: "Manage app data and cache",
      icon: "database",
      onPress: () => {
        triggerHapticFeedback('light')
        Alert.alert(
          "Data & Storage",
          "Choose an action:",
          [
            { text: "Cancel", style: "cancel" },
            { 
              text: "Clear Cache", 
              onPress: () => {
                triggerHapticFeedback('success')
                Alert.alert("Success", "Cache cleared successfully!")
              }
            },
            { 
              text: "Clear All Data", 
              style: "destructive",
              onPress: clearAppData
            },
          ]
        )
      },
    },
    {
      title: "Help & Support",
      description: "Get help and contact support",
      icon: "help-circle",
      onPress: () => {
        triggerHapticFeedback('light')
        Alert.alert(
          "Help & Support",
          "Choose how you'd like to get help:",
          [
            { text: "Cancel", style: "cancel" },
            { 
              text: "Email Support", 
              onPress: () => Linking.openURL('mailto:support@accesslanka.lk?subject=App Support Request')
            },
            { 
              text: "FAQ", 
              onPress: () => Alert.alert("FAQ", "Frequently asked questions will be available in the next update.")
            },
            { 
              text: "User Guide", 
              onPress: () => Alert.alert("User Guide", "A comprehensive user guide will be available soon.")
            },
          ]
        )
      },
    },
    {
      title: "About",
      description: "App version and information",
      icon: "information",
      onPress: () => {
        triggerHapticFeedback('light')
        Alert.alert(
          "About AccessLanka",
          "Version: 1.0.0\nBuild: 100\n\nAccessLanka helps you discover accessible places across Sri Lanka.\n\n© 2024 AccessLanka Team",
          [
            { text: "OK" },
            { 
              text: "Privacy Policy", 
              onPress: () => Linking.openURL('https://accesslanka.lk/privacy')
            },
            { 
              text: "Terms of Service", 
              onPress: () => Linking.openURL('https://accesslanka.lk/terms')
            },
          ]
        )
      },
    },
  ]

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView showsVerticalScrollIndicator={false}>
        {/* Development Environment Info */}
        {isExpoGo && (
          <Card style={[styles.settingsCard, styles.infoCard]}>
            <Card.Content>
              <View style={styles.infoHeader}>
                <List.Icon icon="information" color={currentTheme.colors.primary} size={24} />
                <Text variant="titleMedium" style={styles.infoTitle}>
                  Running in Expo Go
                </Text>
              </View>
              <Text variant="bodyMedium" style={styles.infoDescription}>
                Some features like push notifications require a development build. 
                Your preferences are saved and will work when you create a development build.
              </Text>
            </Card.Content>
          </Card>
        )}

        {/* Theme Settings - Prominent section */}
        <Card style={[styles.settingsCard, styles.themeCard]}>
          <Card.Content>
            <View style={styles.themeHeader}>
              <View style={styles.themeIconContainer}>
                <List.Icon 
                  icon={isDarkMode ? "weather-night" : "weather-sunny"} 
                  color={currentTheme.colors.primary}
                  size={32}
                />
              </View>
              <View style={styles.themeInfo}>
                <Text variant="titleLarge" style={styles.themeTitle}>
                  Theme Preference
                </Text>
                <Text variant="bodyMedium" style={styles.themeDescription}>
                  {getThemeDescription()}
                </Text>
              </View>
            </View>
            
            <View style={styles.themeControls}>
              <SegmentedButtons
                value={themeMode}
                onValueChange={handleThemeChange}
                buttons={[
                  {
                    value: 'light',
                    label: 'Light',
                    icon: 'weather-sunny',
                    style: styles.segmentButton,
                  },
                  {
                    value: 'system',
                    label: 'Auto',
                    icon: 'theme-light-dark',
                    style: styles.segmentButton,
                  },
                  {
                    value: 'dark',
                    label: 'Dark',
                    icon: 'weather-night',
                    style: styles.segmentButton,
                  },
                ]}
                style={styles.segmentedButtons}
              />
              
              {themeMode === 'system' && (
                <View style={styles.systemThemeInfo}>
                  <Chip 
                    mode="outlined" 
                    icon={systemTheme === 'dark' ? 'weather-night' : 'weather-sunny'}
                    textStyle={styles.chipText}
                    style={styles.systemChip}
                  >
                    System: {systemTheme === 'dark' ? 'Dark' : 'Light'}
                  </Chip>
                </View>
              )}
            </View>
          </Card.Content>
        </Card>

        {/* Accessibility Settings */}
        <Card style={styles.settingsCard}>
          <Card.Content>
            <Text variant="titleMedium" style={styles.sectionTitle}>
              Accessibility
            </Text>
            <Text variant="bodySmall" style={styles.sectionDescription}>
              Customize the app for your accessibility needs
            </Text>
            
            {/* Large Text with expandable slider */}
            {renderLargeTextSetting()}
            <Divider />
            
            {/* Other accessibility settings */}
            {accessibilitySettings.slice(1).map((item, index) => (
              <View key={item.key}>
                {renderSettingItem(item)}
                {index < accessibilitySettings.length - 2 && <Divider />}
              </View>
            ))}
          </Card.Content>
        </Card>

        {/* Notification Settings */}
        <Card style={styles.settingsCard}>
          <Card.Content>
            <Text variant="titleMedium" style={styles.sectionTitle}>
              Notifications
            </Text>
            <Text variant="bodySmall" style={styles.sectionDescription}>
              Manage how you receive notifications
            </Text>
            {notificationSettings.map((item, index) => (
              <View key={item.key}>
                {renderSettingItem(item)}
                {index < notificationSettings.length - 1 && <Divider />}
              </View>
            ))}
          </Card.Content>
        </Card>

        {/* Privacy & Security */}
        <Card style={styles.settingsCard}>
          <Card.Content>
            <Text variant="titleMedium" style={styles.sectionTitle}>
              Privacy & Security
            </Text>
            <Text variant="bodySmall" style={styles.sectionDescription}>
              Control your privacy and security settings
            </Text>
            {privacySettings.map((item, index) => (
              <View key={item.key}>
                {renderSettingItem(item)}
                {index < privacySettings.length - 1 && <Divider />}
              </View>
            ))}
          </Card.Content>
        </Card>

        {/* Other Options */}
        <Card style={styles.settingsCard}>
          <Card.Content style={styles.menuContent}>
            <Text variant="titleMedium" style={styles.sectionTitle}>
              Other
            </Text>
            {otherOptions.map((item, index) => (
              <View key={index}>
                <List.Item
                  title={item.title}
                  description={item.description}
                  left={(props) => <List.Icon {...props} icon={item.icon} />}
                  right={(props) => <List.Icon {...props} icon="chevron-right" />}
                  onPress={item.onPress}
                  style={styles.settingItem}
                  accessibilityLabel={`${item.title}: ${item.description}`}
                />
                {index < otherOptions.length - 1 && <Divider />}
              </View>
            ))}
          </Card.Content>
        </Card>

        {/* Reset Settings */}
        <View style={styles.resetContainer}>
          <Button
            mode="outlined"
            icon="restore"
            onPress={handleResetToDefaults}
            style={styles.resetButton}
            accessibilityLabel="Reset all settings to default"
          >
            Reset to Defaults
          </Button>
        </View>
      </ScrollView>

      {/* Language Selection Dialog */}
      <Portal>
        <Dialog visible={showLanguageDialog} onDismiss={() => setShowLanguageDialog(false)}>
          <Dialog.Title>Select Language</Dialog.Title>
          <Dialog.Content>
            {languages.map((language) => (
              <List.Item
                key={language.code}
                title={language.name}
                description={language.native}
                left={(props) => (
                  <List.Icon 
                    {...props} 
                    icon={settings.language === language.code ? "check-circle" : "circle-outline"} 
                  />
                )}
                onPress={() => {
                  triggerHapticFeedback('success')
                  updateSetting('language', language.code)
                  setShowLanguageDialog(false)
                }}
                style={styles.languageItem}
              />
            ))}
          </Dialog.Content>
          <Dialog.Actions>
            <Button onPress={() => setShowLanguageDialog(false)}>Cancel</Button>
          </Dialog.Actions>
        </Dialog>
      </Portal>

      {/* Reset Confirmation Dialog */}
      <Portal>
        <Dialog visible={showResetDialog} onDismiss={() => setShowResetDialog(false)}>
          <Dialog.Title>Reset Settings</Dialog.Title>
          <Dialog.Content>
            <Text variant="bodyMedium">
              Are you sure you want to reset all settings to their default values? This action cannot be undone.
            </Text>
          </Dialog.Content>
          <Dialog.Actions>
            <Button onPress={() => setShowResetDialog(false)}>Cancel</Button>
            <Button onPress={confirmReset} mode="contained">Reset</Button>
          </Dialog.Actions>
        </Dialog>
      </Portal>
    </SafeAreaView>
  )
}

const createStyles = (theme) => StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: theme.colors.background,
  },
  settingsCard: {
    margin: 16,
    marginBottom: 8,
    backgroundColor: theme.colors.surface,
    borderRadius: 16,
    // Enhanced shadows for both light and dark modes
    elevation: theme.dark ? 8 : 4,
    shadowColor: theme.colors.shadow,
    shadowOffset: {
      width: 0,
      height: theme.dark ? 4 : 2,
    },
    shadowOpacity: theme.dark ? 0.3 : 0.1,
    shadowRadius: theme.dark ? 8 : 4,
  },
  themeCard: {
    marginTop: 8,
    // Special styling for theme card
    borderWidth: 2,
    borderColor: theme.colors.primary + '20', // 20% opacity
    elevation: theme.dark ? 12 : 6,
  },
  infoCard: {
    marginTop: 8,
    backgroundColor: theme.colors.primaryContainer,
    borderWidth: 1,
    borderColor: theme.colors.primary + '30',
  },
  infoHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8,
  },
  infoTitle: {
    color: theme.colors.onPrimaryContainer,
    fontWeight: 'bold',
    marginLeft: 8,
  },
  infoDescription: {
    color: theme.colors.onPrimaryContainer,
    opacity: 0.9,
    lineHeight: 20,
  },
  themeHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 20,
  },
  themeIconContainer: {
    width: 60,
    height: 60,
    borderRadius: 30,
    backgroundColor: theme.colors.primary + '15', // 15% opacity
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 16,
  },
  themeInfo: {
    flex: 1,
  },
  themeTitle: {
    color: theme.colors.onSurface,
    fontWeight: 'bold',
    marginBottom: 4,
  },
  themeDescription: {
    color: theme.colors.onSurface,
    opacity: 0.8,
  },
  themeControls: {
    gap: 16,
  },
  segmentedButtons: {
    backgroundColor: theme.colors.surfaceVariant,
  },
  segmentButton: {
    backgroundColor: 'transparent',
  },
  systemThemeInfo: {
    alignItems: 'center',
    marginTop: 8,
  },
  systemChip: {
    backgroundColor: theme.colors.surfaceContainer,
    borderColor: theme.colors.outline,
  },
  chipText: {
    color: theme.colors.onSurface,
    fontSize: 12,
  },
  sectionTitle: {
    color: theme.colors.primary,
    fontWeight: "bold",
    marginBottom: 4,
  },
  sectionDescription: {
    color: theme.colors.onSurface,
    opacity: 0.7,
    marginBottom: 16,
  },
  settingItem: {
    paddingVertical: 8,
    borderRadius: 8,
    marginHorizontal: -8,
    paddingHorizontal: 8,
  },
  disabledItem: {
    opacity: 0.6,
  },
  menuContent: {
    padding: 0,
  },
  resetContainer: {
    padding: 16,
    alignItems: "center",
    marginBottom: 32,
  },
  resetButton: {
    borderColor: theme.colors.tertiary,
    borderRadius: 12,
    paddingHorizontal: 24,
  },
  languageItem: {
    paddingVertical: 4,
  },
  // Text size control styles
  textSizeContainer: {
    marginTop: 8,
    marginHorizontal: 8,
    padding: 16,
    backgroundColor: theme.colors.surfaceContainer,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: theme.colors.outline + '30',
  },
  textSizeHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 16,
  },
  textSizeLabel: {
    color: theme.colors.onSurface,
    fontWeight: '600',
  },
  levelChip: {
    backgroundColor: theme.colors.primary + '15',
    borderColor: theme.colors.primary,
  },
  levelChipText: {
    color: theme.colors.primary,
    fontSize: 12,
    fontWeight: 'bold',
  },
  sliderContainer: {
    marginBottom: 16,
  },
  sliderLabels: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    paddingHorizontal: 8,
    marginBottom: 8,
  },
  sliderLabelText: {
    color: theme.colors.onSurface,
    opacity: 0.7,
    fontSize: 11,
    textAlign: 'center',
    flex: 1,
  },
  buttonSliderContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    paddingHorizontal: 8,
    marginTop: 8,
  },
  sliderButton: {
    width: 30,
    height: 30,
    borderRadius: 15,
    justifyContent: 'center',
    alignItems: 'center',
  },
  sliderButtonInner: {
    width: 12,
    height: 12,
    borderRadius: 6,
  },
  previewContainer: {
    alignItems: 'center',
    padding: 12,
    backgroundColor: theme.colors.surface,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: theme.colors.outline + '20',
  },
  previewLabel: {
    color: theme.colors.onSurface,
    opacity: 0.7,
    marginBottom: 8,
  },
  previewText: {
    color: theme.colors.onSurface,
    textAlign: 'center',
    lineHeight: 24,
  },
})
